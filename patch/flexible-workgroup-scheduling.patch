Index: src/m2s.c
===================================================================
--- src/m2s.c	(revision 1484)
+++ src/m2s.c	(working copy)
@@ -391,7 +391,11 @@
 	"      Functional (default) or detailed simulation for the AMD Southern Islands\n"
 	"      GPU model.\n"
 	"\n"
+	"  --si-workgroup-scheduling-policy (FirstAvailable, UserLocality)\n"
+	"      FirstAvailable (default) or UserLocality workgroup scheduling policy\n"
+	"      for the AMD Southern Islands GPU model.\n"
 	"\n"
+	"\n"
 	"================================================================================\n"
 	"ARM CPU Options\n"
 	"================================================================================\n"
@@ -1073,7 +1077,30 @@
 			continue;
 		}
 
+		/* Southern Islands simulation accuracy */
+		if (!strcmp(argv[argi], "--si-workgroup-scheduling-policy"))
+		{
+			int ctr;
+			si_emulator = 1;
+			m2s_need_argument(argc, argv, argi);
+			argi++;
+			for(ctr = 0; ctr < si_gpu_workgroup_scheduling_policy_number; ctr++) {
+				if(!strcasecmp(argv[argi], si_gpu_workgroup_scheduling_policy_map.map[ctr].string)) {
+					si_gpu_workgroup_scheduling_policy = 
+						str_map_string_case(&si_gpu_workgroup_scheduling_policy_map, 
+                					argv[argi]);
+					break;
+				}
+			}
+			if(ctr == si_gpu_workgroup_scheduling_policy_number) {
+				fatal("option '%s': invalid argument ('%s').\n%s",
+					argv[argi - 1], argv[argi], m2s_err_note);
+			}
 
+			continue;
+		}
+
+
 		/*
 		 * Fermi GPU Options
 		 */
Index: src/arch/southern-islands/timing/gpu.c
===================================================================
--- src/arch/southern-islands/timing/gpu.c	(revision 1484)
+++ src/arch/southern-islands/timing/gpu.c	(working copy)
@@ -23,6 +23,7 @@
 #include <arch/southern-islands/asm/bin-file.h>
 #include <arch/southern-islands/emu/emu.h>
 #include <arch/southern-islands/emu/ndrange.h>
+#include <arch/southern-islands/emu/work-group.h>
 #include <lib/esim/esim.h>
 #include <lib/esim/trace.h>
 #include <lib/mhandle/mhandle.h>
@@ -323,6 +324,16 @@
 };
 enum si_gpu_register_alloc_granularity_t si_gpu_register_alloc_granularity;
 
+struct str_map_t si_gpu_workgroup_scheduling_policy_map =
+{
+	2, {
+		{ "FirstAvailable", si_gpu_workgroup_scheduling_policy_firstavailable },
+		{ "UserLocality"  , si_gpu_workgroup_scheduling_policy_userlocality }
+	} 
+};
+static long long si_gpu_workgroup_scheduling_policy_ctr[si_gpu_workgroup_scheduling_policy_number] = {0, 0};
+enum si_gpu_workgroup_scheduling_policy_t si_gpu_workgroup_scheduling_policy;
+
 /* Device parameters */
 int si_gpu_num_compute_units = 32;
 
@@ -1329,6 +1340,11 @@
 	/* Print statistics */
 	fprintf(f, "Cycles = %lld\n", si_gpu->cycle);
 	fprintf(f, "SimulatedCyclesPerSecond = %.0f\n", cycles_per_sec);
+
+	int ctr;
+	for(ctr = 0; ctr < si_gpu_workgroup_scheduling_policy_number; ctr++) {
+		fprintf(f, "Workgroups assigned with %s policy = %lld\n", si_gpu_workgroup_scheduling_policy_map.map[ctr].string, si_gpu_workgroup_scheduling_policy_ctr[ctr]);
+	}
 }
 
 
@@ -1378,9 +1394,31 @@
 	while (si_gpu->compute_unit_ready_list_head && 
 		ndrange->pending_list_head)
 	{
-		si_compute_unit_map_work_group(
-			si_gpu->compute_unit_ready_list_head,
-			ndrange->pending_list_head);
+		int preferredCU;
+
+		switch(si_gpu_workgroup_scheduling_policy) {
+		case si_gpu_workgroup_scheduling_policy_userlocality:
+			preferredCU = (ndrange->pending_list_head->id
+				/ si_gpu->work_groups_per_compute_unit)
+				% si_gpu_num_compute_units;
+
+			if(DOUBLE_LINKED_LIST_MEMBER(si_gpu, compute_unit_ready,
+				si_gpu->compute_units[preferredCU])) {
+					si_gpu_workgroup_scheduling_policy_ctr[si_gpu_workgroup_scheduling_policy]++;
+					si_compute_unit_map_work_group(
+						si_gpu->compute_units[preferredCU],
+						ndrange->pending_list_head);
+					break;
+			} /* else { Fall through } */
+		case si_gpu_workgroup_scheduling_policy_firstavailable:
+			si_gpu_workgroup_scheduling_policy_ctr[si_gpu_workgroup_scheduling_policy]++;
+			si_compute_unit_map_work_group(
+				si_gpu->compute_unit_ready_list_head,
+				ndrange->pending_list_head);
+			break;
+		default:
+			fatal("Unknown scheduling policy %d", si_gpu_workgroup_scheduling_policy);
+		}
 	}
 
 	/* One more cycle */
Index: src/arch/southern-islands/timing/gpu.h
===================================================================
--- src/arch/southern-islands/timing/gpu.h	(revision 1484)
+++ src/arch/southern-islands/timing/gpu.h	(working copy)
@@ -106,6 +106,14 @@
 	si_gpu_register_alloc_work_group
 } si_gpu_register_alloc_granularity;
 
+extern struct str_map_t si_gpu_workgroup_scheduling_policy_map;
+extern enum si_gpu_workgroup_scheduling_policy_t
+{
+	si_gpu_workgroup_scheduling_policy_firstavailable = 0,
+	si_gpu_workgroup_scheduling_policy_userlocality,
+	si_gpu_workgroup_scheduling_policy_number
+} si_gpu_workgroup_scheduling_policy;
+
 /* User configurable options */
 
 extern int si_gpu_num_compute_units;
