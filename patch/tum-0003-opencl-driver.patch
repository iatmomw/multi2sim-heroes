Index: src/arch/southern-islands/timing/gpu.c
===================================================================
--- src/arch/southern-islands/timing/gpu.c	(revision 2100)
+++ src/arch/southern-islands/timing/gpu.c	(working copy)
@@ -1280,7 +1282,7 @@
 	asTiming(self)->DumpSummary = SIGpuDumpSummary;
 	asTiming(self)->Run = SIGpuRun;
 	asTiming(self)->MemConfigCheck = SIGpuMemConfigCheck;
-	asTiming(self)->MemConfigDefault = SIGpuMemConfigDefault;
+	asTiming(self)->MemConfigDefault = (si_gpu_fused_device ? SIGpuMemConfigFused : SIGpuMemConfigDefault);
 	asTiming(self)->MemConfigParseEntry = SIGpuMemConfigParseEntry;
 }
 
Index: src/driver/opencl/opencl.c
===================================================================
--- src/driver/opencl/opencl.c	(revision 2100)
+++ src/driver/opencl/opencl.c	(working copy)
@@ -225,6 +225,11 @@
 	unsigned int version_ptr;
 	struct opencl_version_t version;
 
+	if (si_gpu_fused_device) {
+		opencl_debug("\tFused device: device memory pointed at host memory.\n");
+		si_emu->global_mem = ctx->mem;
+	}
+
 	/* Arguments */
 	version_ptr = regs->ecx;
 	opencl_debug("\tversion_ptr=0x%x\n", version_ptr);
@@ -273,12 +278,19 @@
 	size = regs->ecx;
 	opencl_debug("\tsize = %u\n", size);
 
-	/* For now, memory allocation in device memory is done by just 
-	 * incrementing a pointer to the top of the global memory space. 
-	 * Since memory deallocation is not implemented, "holes" in the 
-	 * memory space are not considered. */
-	device_ptr = si_emu->video_mem_top;
-	si_emu->video_mem_top += size;
+	if(si_gpu_fused_device) {
+		device_ptr = mem_map_space(si_emu->video_mem, MEM_PAGE_SIZE, size);
+		mem_map(si_emu->video_mem, device_ptr, size, mem_access_read |
+			mem_access_write | mem_access_exec | mem_access_init);
+	} else {
+		/* For now, memory allocation in device memory is done by just 
+		 * incrementing a pointer to the top of the global memory space. 
+		 * Since memory deallocation is not implemented, "holes" in the 
+		 * memory space are not considered. */
+		device_ptr = si_emu->video_mem_top;
+		si_emu->video_mem_top += size;
+	}
+
 	opencl_debug("\t%d bytes of device memory allocated at 0x%x\n",
 			size, device_ptr);
 
@@ -329,10 +341,12 @@
 	opencl_debug("\thost_ptr = 0x%x, device_ptr = 0x%x, size = %d bytes\n",
 			host_ptr, device_ptr, size);
 
-	/* Check memory range */
-	if (device_ptr + size > si_emu->video_mem_top)
-		fatal("%s: accessing device memory not allocated",
-				__FUNCTION__);
+	if(!si_gpu_fused_device) {
+		/* Check memory range */
+		if (device_ptr + size > si_emu->video_mem_top)
+			fatal("%s: accessing device memory not allocated",
+					__FUNCTION__);
+	}
 
 	/* Read memory from device to host */
 	buf = xmalloc(size);
@@ -387,10 +401,12 @@
 	opencl_debug("\tdevice_ptr = 0x%x, host_ptr = 0x%x, size = %d bytes\n",
 			device_ptr, host_ptr, size);
 
-	/* Check memory range */
-	if (device_ptr + size > si_emu->video_mem_top)
-		fatal("%s: accessing device memory not allocated",
-				__FUNCTION__);
+	if(!si_gpu_fused_device) {
+		/* Check memory range */
+		if (device_ptr + size > si_emu->video_mem_top)
+			fatal("%s: accessing device memory not allocated",
+					__FUNCTION__);
+	}
 
 	/* Write memory from host to device */
 	buf = xmalloc(size);
@@ -445,11 +461,13 @@
 	opencl_debug("\tdest_ptr = 0x%x, src_ptr = 0x%x, size = %d bytes\n",
 			dest_ptr, src_ptr, size);
 
-	/* Check memory range */
-	if (src_ptr + size > si_emu->video_mem_top ||
-			dest_ptr + size > si_emu->video_mem_top)
-		fatal("%s: accessing device memory not allocated",
-				__FUNCTION__);
+	if(!si_gpu_fused_device) {
+		/* Check memory range */
+		if (src_ptr + size > si_emu->video_mem_top ||
+				dest_ptr + size > si_emu->video_mem_top)
+			fatal("%s: accessing device memory not allocated",
+					__FUNCTION__);
+	}
 
 	/* Write memory from host to device */
 	buf = xmalloc(size);
@@ -964,9 +982,6 @@
 	unsigned int global_size[3];
 	unsigned int local_size[3];
 
-	if (si_gpu_fused_device)
-		si_emu->global_mem = ctx->mem;
-
 	/* Arguments */
 	kernel_id = regs->ecx;
 	work_dim = regs->edx;
