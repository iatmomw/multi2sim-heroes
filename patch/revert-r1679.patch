Index: tools/clcc/cl2llvm/parser.y
===================================================================
--- tools/clcc/cl2llvm/parser.y	(revision 1680)
+++ tools/clcc/cl2llvm/parser.y	(working copy)
@@ -17,8 +17,6 @@
 #include <llvm-c/Transforms/Scalar.h>
 #include <llvm-c/BitWriter.h>
 
-#include "declarator-list.h"
-#include "function.h"
 #include "val.h"
 #include "type.h"
 #include "init-list-elem.h"
@@ -38,12 +36,8 @@
 int block_count;
 char block_name[50];
 
-int  func_count;
-char func_name[50];
-
 struct hash_table_t *cl2llvm_symbol_table;
 
-struct cl2llvm_function_t *current_function;
 %}
 
 %union {
@@ -55,7 +49,6 @@
 	struct cl2llvm_val_t *llvm_value_ref;
 	struct list_t * init_list;
 	LLVMBasicBlockRef basic_block_ref;
-	struct cl2llvm_decl_list_t *decl_list;
 }
 
 %token<identifier>  TOK_ID
@@ -120,7 +113,7 @@
 %token TOK_GOTO
 %token TOK_HALF
 %token TOK_IF
-%nonassoc TOK_ELSE
+%left TOK_ELSE
 %token TOK_IMAGE2D_T
 %token TOK_IMAGE3D_T
 %token TOK_IMAGE2D_ARRAY_T
@@ -181,10 +174,8 @@
 %type<init_list> init_list
 %type<llvm_type_ref> type_name
 %type<llvm_type_ref> type_spec
-%type<decl_list> declarator
-%type<decl_list> declarator_list
-%type<basic_block_ref> if
-%type<basic_block_ref> while_loop_block
+%type<llvm_type_ref> declarator
+%type<llvm_type_ref> declarator_list
 
 %start program
 
@@ -201,39 +192,25 @@
 
 
 func_def
-	: declarator_list TOK_ID TOK_PAR_OPEN arg_list TOK_PAR_CLOSE
+	: declarator_list TOK_ID
+	/*{
+		current_id.id_name = yylval.identifier;
+	}*/
+	TOK_PAR_OPEN arg_list TOK_PAR_CLOSE
 	{
-		LLVMGetTypeKind($1->type_spec->llvm_type);
-		int err;
-		struct cl2llvm_function_t *new_function;
-
-		snprintf(block_name, sizeof block_name,
-			"block_%d", block_count++);
-
 		LLVMTypeRef func_args[0];
-		LLVMTypeRef cl2llvm_function_type = LLVMFunctionType($1->type_spec->llvm_type, func_args, 0, 0);
-		LLVMValueRef cl2llvm_function = LLVMAddFunction(cl2llvm_module, $2,
-			cl2llvm_function_type);
+		
+		cl2llvm_function = LLVMAddFunction(cl2llvm_module, "func_name",
+			LLVMFunctionType(LLVMInt32Type(), func_args, 0, 0));
 		LLVMSetFunctionCallConv(cl2llvm_function, LLVMCCallConv);
-		LLVMBasicBlockRef cl2llvm_basic_block = LLVMAppendBasicBlock(cl2llvm_function, block_name);
-		new_function = cl2llvm_function_create($2);
-
-		current_function = new_function;
-
+		cl2llvm_basic_block = LLVMAppendBasicBlock(cl2llvm_function, "bb_entry");
 		LLVMPositionBuilderAtEnd(cl2llvm_builder, cl2llvm_basic_block);
-		
-		new_function->func = cl2llvm_function;
-		new_function->func_type = cl2llvm_function_type;
-		new_function->sign = $1->type_spec->sign;
 
-		/*insert function into global symbol table*/
-		err = hash_table_insert(cl2llvm_symbol_table, 
-				$2, new_function);
-		if (!err)
-			printf("function already defined");
-
 	}
 	TOK_CURLY_BRACE_OPEN stmt_list TOK_CURLY_BRACE_CLOSE
+	{
+		LLVMBuildRet(cl2llvm_builder, LLVMConstInt(LLVMInt32Type(), 1, 0));
+	}
 	; 
 
 
@@ -257,13 +234,6 @@
 		$$ = $1;
 	}
 	| declarator_list declarator
-	{
-		LLVMGetTypeKind($2->type_spec->llvm_type);
-		cl2llvm_attach_decl_to_list($2, $1);
-		cl2llvm_decl_list_struct_free($2);
-		LLVMGetTypeKind($1->type_spec->llvm_type);
-		$$ = $1;
-	}
 	;
 
 access_qual
@@ -276,46 +246,31 @@
 declarator
 	: type_spec 
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->type_spec = $1;
-		$$ = decl_list;
+		$$ = $1;
 	}
 	| addr_qual
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->addr_qual = NULL;
-		$$ = decl_list;
+		$$ = NULL;
 	}
 	| TOK_KERNEL
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->kernel_t = NULL;
-		$$ = decl_list;
+		$$ = NULL;
 	}
 	| TOK_INLINE
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->inline_t = NULL;
-		$$ = decl_list;
+		$$ = NULL;
 	}
 	| sc_spec
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->sc_spec = NULL;
-		$$ = decl_list;
-
+		$$ = NULL;
 	}
 	| access_qual
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->access_qual = NULL;
-		$$ = decl_list;
+		$$ = NULL;
 	}
 	| type_qual
 	{
-		struct cl2llvm_decl_list_t *decl_list = cl2llvm_decl_list_create();
-		decl_list->type_qual = NULL;
-		$$ = decl_list;
+		$$ = NULL;
 	}
 	;
 
@@ -361,7 +316,7 @@
 	{
 		struct cl2llvm_symbol_t *symbol;
 
-		symbol = hash_table_get(current_function->symbol_table, $1);
+		symbol = hash_table_get(cl2llvm_symbol_table, $1);
 		if (!symbol)
 			yyerror("undefined identifier");
 
@@ -403,14 +358,6 @@
 	| do_while_loop
 	| if_stmt
 	| TOK_RETURN expr TOK_SEMICOLON
-	{
-		struct cl2llvm_type_t *type = cl2llvm_type_create_w_init( LLVMGetReturnType(current_function->func_type), current_function->sign);
-		struct cl2llvm_val_t *ret_val = llvm_type_cast($2, type);
-		LLVMBuildRet(cl2llvm_builder, ret_val->val);
-		cl2llvm_type_free(type);
-		cl2llvm_val_free(ret_val);
-		cl2llvm_val_free($2);
-	}
 	| TOK_CONTINUE TOK_SEMICOLON
 	| TOK_BREAK TOK_SEMICOLON
 	| switch_stmt
@@ -497,30 +444,30 @@
 			int err;			
 			struct cl2llvm_symbol_t *current_list_elem = list_get($2, i);
 			symbol = cl2llvm_symbol_create_w_init( LLVMBuildAlloca( 
-				cl2llvm_builder, $1->type_spec->llvm_type, 
-				current_list_elem->name), $1->type_spec->sign, 
+				cl2llvm_builder, $1->llvm_type, 
+				current_list_elem->name), $1->sign, 
 				current_list_elem->name);
-			symbol->cl2llvm_val->type->llvm_type = $1->type_spec->llvm_type;
-			err = hash_table_insert(current_function->symbol_table, 
+			symbol->cl2llvm_val->type->llvm_type = $1->llvm_type;
+			err = hash_table_insert(cl2llvm_symbol_table, 
 				current_list_elem->name, symbol);
 			if (!err)
 				printf("duplicated symbol");
-			if (LLVMTypeOf(current_list_elem->cl2llvm_val->val) == $1->type_spec->llvm_type 
-				&& current_list_elem->cl2llvm_val->type->sign == $1->type_spec->sign)
+			if (LLVMTypeOf(current_list_elem->cl2llvm_val->val) == $1->llvm_type 
+				&& current_list_elem->cl2llvm_val->type->sign == $1->sign)
 			{
 				LLVMBuildStore(cl2llvm_builder,
 					current_list_elem->cl2llvm_val->val, symbol->cl2llvm_val->val);
 			}
 			else
 			{
-				cast_to_val = llvm_type_cast( current_list_elem->cl2llvm_val, $1->type_spec);
+				cast_to_val = llvm_type_cast( current_list_elem->cl2llvm_val, $1);
 				LLVMBuildStore(cl2llvm_builder,
 					cast_to_val->val,
 					symbol->cl2llvm_val->val);
 				cl2llvm_val_free(cast_to_val);
 			}
 		}
-		cl2llvm_decl_list_free($1);
+		cl2llvm_type_free($1);
 		LIST_FOR_EACH($2, i)
 		{
 			cl2llvm_symbol_free(list_get($2, i));
@@ -562,65 +509,28 @@
 	;
 
 if_stmt
-	: if %prec TOK_PLUS
+	: TOK_IF TOK_PAR_OPEN expr TOK_PAR_CLOSE
 	{
-		/* goto endif block*/
-		LLVMBuildBr(cl2llvm_builder, $1);
-		LLVMPositionBuilderAtEnd(cl2llvm_builder, $1);
-	}
-	| if TOK_ELSE
-	{ 
-		/*create endif block. $1 now becomes the if false block*/
+		struct cl2llvm_type_t *i1 = cl2llvm_type_create_w_init(LLVMInt1Type(), 1);
+
 		snprintf(block_name, sizeof block_name,
 			"block_%d", block_count++);
-		LLVMBasicBlockRef endif = LLVMAppendBasicBlock(current_function->func, block_name);
-		
-		/*Branch to endif*/
-		LLVMBuildBr(cl2llvm_builder, endif);
-		/*position builder at if false block*/
-		LLVMPositionBuilderAtEnd(cl2llvm_builder, $1);
-		$<basic_block_ref>$ = endif;
-	}
-	stmt_or_stmt_list %prec TOK_MULT
-	{
-		/*branch to endif block and prepare to write code for endif block*/
-		LLVMBuildBr(cl2llvm_builder, $<basic_block_ref>3);
-		LLVMPositionBuilderAtEnd(cl2llvm_builder, $<basic_block_ref>3);
 
-	}
-	;
-
-if
-	:  TOK_IF TOK_PAR_OPEN expr TOK_PAR_CLOSE
-	{
-		struct cl2llvm_type_t *i1 = cl2llvm_type_create_w_init(LLVMInt1Type(), 1);
-		
-		/*Create endif block*/
+		LLVMBasicBlockRef if_false = LLVMAppendBasicBlock(cl2llvm_function, block_name);
 		snprintf(block_name, sizeof block_name,
 			"block_%d", block_count++);
-		LLVMBasicBlockRef endif = LLVMAppendBasicBlock(current_function->func, block_name);
-		
-		/*Create if true block*/
-		snprintf(block_name, sizeof block_name,
-			"block_%d", block_count++);
-		LLVMBasicBlockRef if_true = LLVMAppendBasicBlock(current_function->func, block_name);
-		
-		/*evaluate expression*/
-		struct cl2llvm_val_t *bool_val =  llvm_type_cast($3, i1);
-		LLVMBuildCondBr(cl2llvm_builder, bool_val->val, if_true, endif);
-		$<basic_block_ref>$ = endif;
-		
-		/*prepare to write if_true block*/
+		LLVMBasicBlockRef if_true = LLVMAppendBasicBlock(cl2llvm_function, block_name);
+
+		LLVMBuildCondBr(cl2llvm_builder, llvm_type_cast($3, i1)->val, if_true, if_false);
+		$<basic_block_ref>$ = if_false;
 		LLVMPositionBuilderAtEnd(cl2llvm_builder, if_true);
-	
-		cl2llvm_val_free(bool_val);
-		cl2llvm_val_free($3);
-		cl2llvm_type_free(i1);
 	}
 	stmt_or_stmt_list
 	{
-		$$ = $<basic_block_ref>5;
+		LLVMBuildBr(cl2llvm_builder, $<basic_block_ref>5);
+		LLVMPositionBuilderAtEnd(cl2llvm_builder, $<basic_block_ref>5);
 	}
+/*	| TOK_IF TOK_PAR_OPEN expr TOK_PAR_CLOSE stmt_or_stmt_list TOK_ELSE stmt_or_stmt_list*/
 	;
 
 for_loop
@@ -637,44 +547,9 @@
 	;
 
 while_loop
-	: TOK_WHILE while_loop_block TOK_PAR_OPEN expr TOK_PAR_CLOSE
-	{
-		struct cl2llvm_type_t *i1 = cl2llvm_type_create_w_init(LLVMInt1Type(), 1);
-
-		snprintf(block_name, sizeof block_name,
-			"block_%d", block_count++);
-		LLVMBasicBlockRef if_false = LLVMAppendBasicBlock(current_function->func, block_name);
-		
-		struct cl2llvm_val_t *bool_val =  llvm_type_cast($4, i1);
-		LLVMBuildCondBr(cl2llvm_builder, bool_val->val, $2, if_false);
-		$<basic_block_ref>$ = if_false;
-		LLVMPositionBuilderAtEnd(cl2llvm_builder, $2);
-	
-		cl2llvm_val_free(bool_val);
-		cl2llvm_type_free(i1);
-	}
-	stmt_or_stmt_list
-	{
-		struct cl2llvm_type_t *i1 = cl2llvm_type_create_w_init(LLVMInt1Type(), 1);
-		struct cl2llvm_val_t *bool_val =  llvm_type_cast($4, i1);
-		LLVMBuildCondBr(cl2llvm_builder, bool_val->val, $2, $<basic_block_ref>6);
-		LLVMPositionBuilderAtEnd(cl2llvm_builder, $<basic_block_ref>6);
-		cl2llvm_val_free(bool_val);
-		cl2llvm_val_free($4);
-		cl2llvm_type_free(i1);
-	}
+	: TOK_WHILE TOK_PAR_OPEN expr TOK_PAR_CLOSE stmt_or_stmt_list
 	;
 
-while_loop_block
-	: /*empty*/
-	{
-		snprintf(block_name, sizeof block_name,
-			"block_%d", block_count++);
-		LLVMBasicBlockRef while_loop = LLVMAppendBasicBlock(current_function->func, block_name);
-		$$ = while_loop;
-	}
-	;
-
 maybe_expr
 	: /*empty*/
 	{
Index: tools/clcc/cl2llvm/Makefile.am
===================================================================
--- tools/clcc/cl2llvm/Makefile.am	(revision 1680)
+++ tools/clcc/cl2llvm/Makefile.am	(working copy)
@@ -13,12 +13,6 @@
 	cl2llvm.c \
 	cl2llvm.h \
 	\
-	declarator-list.h\
-	declarator-list.c\
-	\
-	function.h\
-	function.c\
-	\
 	init-list-elem.c\
 	init-list-elem.h\
 	\
Index: tools/clcc/cl2llvm/cl2llvm.c
===================================================================
--- tools/clcc/cl2llvm/cl2llvm.c	(revision 1680)
+++ tools/clcc/cl2llvm/cl2llvm.c	(working copy)
@@ -33,7 +33,6 @@
 #include <lib/util/hash-table.h>
 #include <lib/util/list.h>
 
-#include "function.h"
 #include "symbol.h"
 #include "cl2llvm.h"
 #include "parser.h"
@@ -42,6 +41,8 @@
 /* Global variables */
 LLVMBuilderRef cl2llvm_builder;
 LLVMModuleRef cl2llvm_module;
+LLVMValueRef cl2llvm_function;
+LLVMBasicBlockRef cl2llvm_basic_block;
 
 /* Current file being compiled */
 char *cl2llvm_file_name;
@@ -81,7 +82,7 @@
 	cl2llvm_builder = LLVMCreateBuilder();
 	cl2llvm_module = LLVMModuleCreateWithName("module");
 
-	/* Initialize global symbol table */
+	/* Initialize symbol table */
 	cl2llvm_symbol_table = hash_table_create(10, 1);
 
 }
@@ -90,11 +91,11 @@
 void cl2llvm_done(void)
 {
 	char *name;
-	struct cl2llvm_function_t *function;
+	struct cl2llvm_symbol_t *symbol;
 
 	/* Free symbol table */
-	HASH_TABLE_FOR_EACH(cl2llvm_symbol_table, name, function)
-		cl2llvm_function_free(function);
+	HASH_TABLE_FOR_EACH(cl2llvm_symbol_table, name, symbol)
+		cl2llvm_symbol_free(symbol);
 	hash_table_free(cl2llvm_symbol_table);
 }
 
